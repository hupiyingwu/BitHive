/**
 * 这个文件通过script标签直接在模板里面引入。
 * 这个文件最初的定义只是用于 native client 调用 js代码，后期考虑把所有的事件定义迁入这里.
 */
/**
 * 通过这个"全局"变量来传递event之间的数据.
 * @type {Object}
 */
//==== for v1.1.0 ====
//应用支付体系回调
function payCallback(data){hdJsConn.payCallback(data)}
//应用分享回调
function shareCallback(data){hdJsConn.shareCallback(data)}
//应该用登录回调
function loginCallback(data){hdJsConn.loginCallback(data)}
//getTicket回调
function getTicketCallback(data){hdJsConn.setTicket(data)}var eventData={},HdJsConn=function(){function HdJsConn(){
//注册事件
//以下大多数事件都定义在h5-frame.js
this.appJsReady=document.createEvent("CustomEvent"),this.appJsReady.initCustomEvent("appJsReady",!1,!1,""),this.pauseEvent=document.createEvent("CustomEvent"),this.pauseEvent.initCustomEvent("pause",!1,!1,""),this.resumeEvent=document.createEvent("CustomEvent"),this.resumeEvent.initCustomEvent("resume",!1,!1,""),this.backButtonEvent=document.createEvent("CustomEvent"),this.backButtonEvent.initCustomEvent("backButton",!1,!1,""),this.menuButtonEvent=document.createEvent("CustomEvent"),this.menuButtonEvent.initCustomEvent("menuButton",!1,!1,""),this.searchButtonEvent=document.createEvent("CustomEvent"),this.searchButtonEvent.initCustomEvent("searchButton",!1,!1,""),this.startCallButtonEvent=document.createEvent("CustomEvent"),this.startCallButtonEvent.initCustomEvent("startCallButton",!1,!1,""),this.endCallButtonEvent=document.createEvent("CustomEvent"),this.endCallButtonEvent.initCustomEvent("endCallButton",!1,!1,""),this.volumeButtonEvent=document.createEvent("CustomEvent"),this.volumeButtonEvent.initCustomEvent("volumeButton",!1,!1,""),this.onlineEvent=document.createEvent("CustomEvent"),this.onlineEvent.initCustomEvent("online",!1,!1,""),this.offlineEvent=document.createEvent("CustomEvent"),this.offlineEvent.initCustomEvent("offline",!1,!1,""),this.keyboardEvent=document.createEvent("CustomEvent"),this.keyboardEvent.initCustomEvent("keyboard",!1,!1,""),this.sdkRotationEvent=document.createEvent("CustomEvent"),this.sdkRotationEvent.initCustomEvent("sdkRotation",!1,!1,""),
//事件实际定义在h5-frame.js
this.setTicketEvent=document.createEvent("CustomEvent"),this.setTicketEvent.initCustomEvent("setTicket",!1,!1,""),this.loginCallbackEvent=document.createEvent("CustomEvent"),this.loginCallbackEvent.initCustomEvent("loginCallback",!1,!1,""),this.shareCallbackEvent=document.createEvent("CustomEvent"),this.shareCallbackEvent.initCustomEvent("shareCallback",!1,!1,""),this.payCallbackEvent=document.createEvent("CustomEvent"),this.payCallbackEvent.initCustomEvent("payCallback",!1,!1,""),
//用于上报桌面快捷方式成功后的日志
this.shortCutEvent=document.createEvent("CustomEvent"),this.shortCutEvent.initCustomEvent("shortCut",!1,!1,""),
//执行桌面快捷方式
this.frameShortCutEvent=document.createEvent("CustomEvent"),this.frameShortCutEvent.initCustomEvent("frameShortCut",!1,!1,""),this.openGameFromScEvent=document.createEvent("CustomEvent"),this.openGameFromScEvent.initCustomEvent("openGameFromSc",!1,!1,""),this.shakeEvent=document.createEvent("CustomEvent"),this.shakeEvent.initCustomEvent("shake",!1,!1,""),this.ssoLoginEvent=document.createEvent("CustomEvent"),this.ssoLoginEvent.initCustomEvent("ssoLogin",!1,!1,""),this.getThirdUserEvent=document.createEvent("CustomEvent"),this.getThirdUserEvent.initCustomEvent("getThirdUser",!1,!1,"")}/**
     * APP切换到后台事件
     *
     * @method pause
     *
     * @example
     *     //调用方法
     *     hdJsConn.pause()
     */
/**
     * APP恢复前台到事件
     *
     * @method resume
     *
     * @example
     *     //调用方法
     *     hdJsConn.resume()
     */
/**
     * APP点击后退按钮事件
     *
     * @method backButton
     *
     * @example
     *     //调用方法
     *     hdJsConn.backButton()
     */
/**
     * APP点击菜单按钮
     *
     * @method menuButton
     *
     * @example
     *     //调用方法
     *     hdJsConn.menuButton()
     */
/**
     * APP点击搜索按钮
     *
     * @method searchButton
     *
     * @example
     *     //调用方法
     *     hdJsConn.searchButton()
     */
/**
     * APP点击开始电话
     *
     * @method startCallButton
     *
     * @example
     *     //调用方法
     *     hdJsConn.startCallButton()
     */
/**
     * APP点击结束
     *
     * @method endCallButton
     *
     * @example
     *     //调用方法
     *     hdJsConn.endCallButton()
     */
/**
     * APP点击音量按钮事件
     *
     * @params {string} type 音量调整类型 up || down
     * @method volumeButton
     *
     * @example
     *     //调用方法
     *     hdJsConn.endCallButton(type)
     */
/**
     * APP网络状态调整事件
     *
     * @params {string} type 网络类型
     * @method online
     *
     * @example
     *     //调用方法
     *     hdJsConn.online(type)
     *
     *     //网络类型列表
     *     //wifi, ethernet, cell_2g, cell_3g, cell_4g, cell, unknown
     */
/**
     * APP网络状态关闭事件
     *
     * @method offline
     *
     * @example
     *     //调用方法
     *     hdJsConn.offline()
     */
/**
     * APP旋转事件
     *
     * @params {string} status 旋转后的状态 landscape || portrait
     * @method rotation
     *
     * @example
     *     //调用方法
     *     hdJsConn.rotation(status)
     */
/**
     * APP键盘事件，键盘弹出状态为 on 否则为 off
     *
     * @params {string} status 键盘状态 on || off
     * @method keyboard
     *
     * @example
     *     //调用方法
     *     hdJsConn.keyboard(status)
     */
/**
     * App设置Ticket, getTicket回调函数
     *
     * @method setTicket
     * @param {string} loginData 当前登录用户的ticket信息
     *
     * @example
     *      //返回数据
     *      var loginData = JSON.stringify({
     *          'app_key': 'abcd1234abcd1234',  //小伙伴提供的app_key
     *          'timestamp': 1431050526,        //时间戳
     *          'ticket': 'qwertyu123456',      //用于查询app用户信息的票据
     *          'user_type': 'real'             //用户类型：登录用户为'real', 游客为'temp'
     *          'nonce': 'abcdefghijk',         //随机生成的字符串
     *          'signature': 'asdfghjkl123455'  //对非签名字段按key正向排序后，按key=value用'&'连接后在字符串最后连接小伙伴提供app_secret后,使用sha1对上述字符串签名
     *      });
     *      hdJsConn.setTicket(loginData);
     */
/**
     * App登录完成或取消后事件, showLoginView方法回调
     *
     * @method loginCallback
     * @param {string} data 登录返回信息，格式json字符串
     *
     * @example
     *      //传输数据
     *      var data = {
     *          "code": 0,                          //0为成功，-1取消，其他自定义
     *          "message": 'success',               //用于debug的消息
     *          "showMessage": '登录成功',           //用于显示给用户的消息
     *          "data":{                            //其他需要携带的参数
     *
     *          }
     *      };
     *      var dataString = JSON.stringify(data);
     *      //调用
     *      hdJsConn.loginCallback(dataString);
     */
/**
     * APP完成分享后或取消事件， showShareView方法回调
     *
     * @method shareCallback
     * @param {string} data 分享返回信息, 格式json字符串
     *
     * @example
     *      //分享使用渠道，type值说明：
     *      // weixin: 微信
     *      // weipy: 微信朋友圈
     *      // qq: QQ
     *      // qzone: QQ空间
     *      // weibo: 微博
     *      // tqq: qq微博
     *      // other: 其他
     *      // 传输数据
     *      var data = {
     *          "code": 0,                          //0为成功，-1取消，其他自定义
     *          "message": 'success',               //用于debug的消息
     *          "showMessage": '登录成功',           //用于显示给用户的消息
     *          "data":{                            //其他需要携带的参数
     *              "type": 'weixin'                //分享使用的渠道
     *          }
     *      };
     *      var dataString = JSON.stringify(data);
     *      //调用
     *      hdJsConn.shareCallback(dataString);
     */
/**
     * APP完成支付或取消事件, showPayView方法回调
     *
     * @method payCallback
     * @param {string} data 支付返回信息，格式json字符串
     *
     * @example
     *      //传输数据
     *      var data = {
     *          "code": 0,                          //0为成功，-1取消，其他自定义
     *          "message": 'success',               //用于debug的消息
     *          "showMessage": '登录成功',           //用于显示给用户的消息
     *          "data":{                            //其他需要携带的参数
     *
     *         }
     *      };
     *      var dataString = JSON.stringify(data);
     *      //调用
     *      hdJsConn.payCallback(dataString);
     */
/**
     * 创建快捷方式成功或失败回调, createShortCut方法回调，用于上报日志
     *
     * @method createShortCutCallback
     * @param {string} data 创建快捷方式成功或失败信息，格式json字符串
     *
     * @example
     *      //传输数据
     *      var data = {
     *          "code": 0,                          //0为成功，-1取消，其他自定义
     *          "message": 'success',               //用于debug的消息
     *          "showMessage": '创建成功',           //用于显示给用户的消息
     *          "data":{                            //其他需要携带的参数
     *
     *         }
     *      };
     *      var dataString = JSON.stringify(data);
     *      //调用
     *      hdJsConn.createShortCutCallback(dataString);
     */
/**
     * 创建快捷方式
     *
     * @method createShortCut
     * @param {string} data
     *
     * @example
     *      //调用
     *      hdJsConn.createShortCut();
     */
/**
     * 从快捷方式打开游戏，用于上报日志
     *
     * @method openGameFromShortCut
     * @example
     *      hdJsConn.openGameFromShortCut();
     */
/**
     * 摇一摇打开游戏
     *
     * @method shake
     * @example
     *      hdJsConn.shake();
     */
/**
     * 获取第三方用户信息，58
     * 事件监听在 pm_58.js
     * @method getThirdUser
     * @example
     *      hdJsConn.getThirdUser();
     *
     */
/**
     * ssologin 回调
     *
     * @method createShortCutCallback
     * @param {string} data ssologin登录参数
     *
     * @example
     *      //传输数据
     *      var data = {
     *              //参见api的user/ssologin定义，这里只是透传数据.
     *         }
     *      };
     *      var dataString = JSON.stringify(data);
     *      //调用
     *      hdJsConn.ssoLogin(dataString);
     */
return HdJsConn.prototype.onAppJsReady=function(){return document.dispatchEvent(this.appJsReady),console.log("APP JS Ready")},HdJsConn.prototype.pause=function(){return document.dispatchEvent(this.pauseEvent),console.log("APP Pause")},HdJsConn.prototype.resume=function(){return document.dispatchEvent(this.resumeEvent),console.log("APP Resume")},HdJsConn.prototype.backButton=function(){return document.dispatchEvent(this.backButtonEvent),console.log("APP Press Back Button")},HdJsConn.prototype.menuButton=function(){return document.dispatchEvent(this.menuButtonEvent),console.log("App Press Menu Button")},HdJsConn.prototype.searchButton=function(){return document.dispatchEvent(this.searchButtonEvent),console.log("App Press Search Button")},HdJsConn.prototype.startCallButton=function(){return console.log("App Press Start Call")},HdJsConn.prototype.endCallButton=function(){return document.dispatchEvent(this.endCallButtonEvent),console.log("App Press End Call")},HdJsConn.prototype.volumeButton=function(type){return eventData.volumeButton=type,document.dispatchEvent(this.volumeButtonEvent),console.log("App Press Volume "+type)},HdJsConn.prototype.online=function(type){return eventData.online=type,document.dispatchEvent(this.onlineEvent),console.log("App Change Online "+type)},HdJsConn.prototype.offline=function(){return document.dispatchEvent(this.offlineEvent),console.log("App offline")},HdJsConn.prototype.rotation=function(status){return eventData.sdkRotation=status,document.dispatchEvent(this.sdkRotationEvent),console.log("App Rotate To "+status)},HdJsConn.prototype.keyboard=function(status){return eventData.keyboard=status,document.dispatchEvent(this.keyboardEvent),console.log("App Keyboard is "+status)},HdJsConn.prototype.setTicket=function(loginData){return eventData.setTicket=loginData,document.dispatchEvent(this.setTicketEvent),console.log("App SetTicket "+loginData)},HdJsConn.prototype.loginCallback=function(data){return eventData.loginCallback=data,document.dispatchEvent(this.loginCallbackEvent),console.log("App After Login: "+data)},HdJsConn.prototype.shareCallback=function(data){return eventData.shareCallback=data,document.dispatchEvent(this.shareCallbackEvent),console.log("App After Share: "+data)},HdJsConn.prototype.payCallback=function(data){return eventData.payCallback=data,document.dispatchEvent(this.payCallbackEvent),console.log("App After Pay: "+data)},HdJsConn.prototype.createShortCutCallback=function(data){var data=JSON.parse(data);if(data&&0==data.code)return eventData.shortCut=data,document.dispatchEvent(this.shortCutEvent),console.log("App After Create ShortCut Callback : "+data)},HdJsConn.prototype.createShortCut=function(){return document.dispatchEvent(this.frameShortCutEvent),console.log("App After Create ShortCut : "+data)},HdJsConn.prototype.openGameFromShortCut=function(){return document.dispatchEvent(this.openGameFromScEvent),console.log("Open Game from Shortcut")},HdJsConn.prototype.shake=function(){return document.dispatchEvent(this.shakeEvent),console.log("shake")},HdJsConn.prototype.getThirdUser=function(){return document.dispatchEvent(this.getThirdUserEvent),console.log("getThirdUser")},HdJsConn.prototype.ssoLogin=function(data){return eventData.ssoLogin=data,document.dispatchEvent(this.ssoLoginEvent),console.log("sso login")},HdJsConn}(),hdJsConn=new HdJsConn;!function(){"use strict";/**
	 * @preserve FastClick: polyfill to remove click delays on browsers with touch UIs.
	 *
	 * @codingstandard ftlabs-jsv2
	 * @copyright The Financial Times Limited [All Rights Reserved]
	 * @license MIT License (see LICENSE.txt)
	 */
/*jslint browser:true, node:true*/
/*global define, Event, Node*/
/**
	 * Instantiate fast-clicking listeners on the specified layer.
	 *
	 * @constructor
	 * @param {Element} layer The layer to listen on
	 * @param {Object} [options={}] The options to override the defaults
	 */
function FastClick(layer,options){
// Some old versions of Android don't have Function.prototype.bind
function bind(method,context){return function(){return method.apply(context,arguments)}}var oldOnClick;if(options=options||{},/**
		 * Whether a click is currently being tracked.
		 *
		 * @type boolean
		 */
this.trackingClick=!1,/**
		 * Timestamp for when click tracking started.
		 *
		 * @type number
		 */
this.trackingClickStart=0,/**
		 * The element being tracked for a click.
		 *
		 * @type EventTarget
		 */
this.targetElement=null,/**
		 * X-coordinate of touch start event.
		 *
		 * @type number
		 */
this.touchStartX=0,/**
		 * Y-coordinate of touch start event.
		 *
		 * @type number
		 */
this.touchStartY=0,/**
		 * ID of the last touch, retrieved from Touch.identifier.
		 *
		 * @type number
		 */
this.lastTouchIdentifier=0,/**
		 * Touchmove boundary, beyond which a click will be cancelled.
		 *
		 * @type number
		 */
this.touchBoundary=options.touchBoundary||10,/**
		 * The FastClick layer.
		 *
		 * @type Element
		 */
this.layer=layer,/**
		 * The minimum time between tap(touchstart and touchend) events
		 *
		 * @type number
		 */
this.tapDelay=options.tapDelay||200,/**
		 * The maximum time for a tap
		 *
		 * @type number
		 */
this.tapTimeout=options.tapTimeout||700,!FastClick.notNeeded(layer)){for(var methods=["onMouse","onClick","onTouchStart","onTouchMove","onTouchEnd","onTouchCancel"],context=this,i=0,l=methods.length;i<l;i++)context[methods[i]]=bind(context[methods[i]],context);
// Set up event handlers as required
deviceIsAndroid&&(layer.addEventListener("mouseover",this.onMouse,!0),layer.addEventListener("mousedown",this.onMouse,!0),layer.addEventListener("mouseup",this.onMouse,!0)),layer.addEventListener("click",this.onClick,!0),layer.addEventListener("touchstart",this.onTouchStart,!1),layer.addEventListener("touchmove",this.onTouchMove,!1),layer.addEventListener("touchend",this.onTouchEnd,!1),layer.addEventListener("touchcancel",this.onTouchCancel,!1),
// Hack is required for browsers that don't support Event#stopImmediatePropagation (e.g. Android 2)
// which is how FastClick normally stops click events bubbling to callbacks registered on the FastClick
// layer when they are cancelled.
Event.prototype.stopImmediatePropagation||(layer.removeEventListener=function(type,callback,capture){var rmv=Node.prototype.removeEventListener;"click"===type?rmv.call(layer,type,callback.hijacked||callback,capture):rmv.call(layer,type,callback,capture)},layer.addEventListener=function(type,callback,capture){var adv=Node.prototype.addEventListener;"click"===type?adv.call(layer,type,callback.hijacked||(callback.hijacked=function(event){event.propagationStopped||callback(event)}),capture):adv.call(layer,type,callback,capture)}),
// If a handler is already declared in the element's onclick attribute, it will be fired before
// FastClick's onClick handler. Fix this by pulling out the user-defined handler function and
// adding it as listener.
"function"==typeof layer.onclick&&(
// Android browser on at least 3.2 requires a new reference to the function in layer.onclick
// - the old one won't work if passed to addEventListener directly.
oldOnClick=layer.onclick,layer.addEventListener("click",function(event){oldOnClick(event)},!1),layer.onclick=null)}}/**
	* Windows Phone 8.1 fakes user agent string to look like Android and iPhone.
	*
	* @type boolean
	*/
var deviceIsWindowsPhone=navigator.userAgent.indexOf("Windows Phone")>=0,deviceIsAndroid=navigator.userAgent.indexOf("Android")>0&&!deviceIsWindowsPhone,deviceIsIOS=/iP(ad|hone|od)/.test(navigator.userAgent)&&!deviceIsWindowsPhone,deviceIsIOS4=deviceIsIOS&&/OS 4_\d(_\d)?/.test(navigator.userAgent),deviceIsIOSWithBadTarget=deviceIsIOS&&/OS [6-7]_\d/.test(navigator.userAgent),deviceIsBlackBerry10=navigator.userAgent.indexOf("BB10")>0;/**
	 * Determine whether a given element requires a native click.
	 *
	 * @param {EventTarget|Element} target Target DOM element
	 * @returns {boolean} Returns true if the element needs a native click
	 */
FastClick.prototype.needsClick=function(target){switch(target.nodeName.toLowerCase()){
// Don't send a synthetic click to disabled inputs (issue #62)
case"button":case"select":case"textarea":if(target.disabled)return!0;break;case"input":
// File inputs need real clicks on iOS 6 due to a browser bug (issue #68)
if(deviceIsIOS&&"file"===target.type||target.disabled)return!0;break;case"label":case"iframe":// iOS8 homescreen apps can prevent events bubbling into frames
case"video":return!0}return/\bneedsclick\b/.test(target.className)},/**
	 * Determine whether a given element requires a call to focus to simulate click into element.
	 *
	 * @param {EventTarget|Element} target Target DOM element
	 * @returns {boolean} Returns true if the element requires a call to focus to simulate native click.
	 */
FastClick.prototype.needsFocus=function(target){switch(target.nodeName.toLowerCase()){case"textarea":return!0;case"select":return!deviceIsAndroid;case"input":switch(target.type){case"button":case"checkbox":case"file":case"image":case"radio":case"submit":return!1}
// No point in attempting to focus disabled inputs
return!target.disabled&&!target.readOnly;default:return/\bneedsfocus\b/.test(target.className)}},/**
	 * Send a click event to the specified element.
	 *
	 * @param {EventTarget|Element} targetElement
	 * @param {Event} event
	 */
FastClick.prototype.sendClick=function(targetElement,event){var clickEvent,touch;
// On some Android devices activeElement needs to be blurred otherwise the synthetic click will have no effect (#24)
document.activeElement&&document.activeElement!==targetElement&&document.activeElement.blur(),touch=event.changedTouches[0],
// Synthesise a click event, with an extra attribute so it can be tracked
clickEvent=document.createEvent("MouseEvents"),clickEvent.initMouseEvent(this.determineEventType(targetElement),!0,!0,window,1,touch.screenX,touch.screenY,touch.clientX,touch.clientY,!1,!1,!1,!1,0,null),clickEvent.forwardedTouchEvent=!0,targetElement.dispatchEvent(clickEvent)},FastClick.prototype.determineEventType=function(targetElement){
//Issue #159: Android Chrome Select Box does not open with a synthetic click event
//Issue #159: Android Chrome Select Box does not open with a synthetic click event
return deviceIsAndroid&&"select"===targetElement.tagName.toLowerCase()?"mousedown":"click"},/**
	 * @param {EventTarget|Element} targetElement
	 */
FastClick.prototype.focus=function(targetElement){var length;
// Issue #160: on iOS 7, some input elements (e.g. date datetime month) throw a vague TypeError on setSelectionRange. These elements don't have an integer value for the selectionStart and selectionEnd properties, but unfortunately that can't be used for detection because accessing the properties also throws a TypeError. Just check the type instead. Filed as Apple bug #15122724.
deviceIsIOS&&targetElement.setSelectionRange&&0!==targetElement.type.indexOf("date")&&"time"!==targetElement.type&&"month"!==targetElement.type?(length=targetElement.value.length,targetElement.setSelectionRange(length,length)):targetElement.focus()},/**
	 * Check whether the given target element is a child of a scrollable layer and if so, set a flag on it.
	 *
	 * @param {EventTarget|Element} targetElement
	 */
FastClick.prototype.updateScrollParent=function(targetElement){var scrollParent,parentElement;
// Attempt to discover whether the target element is contained within a scrollable layer. Re-check if the
// target element was moved to another parent.
if(scrollParent=targetElement.fastClickScrollParent,!scrollParent||!scrollParent.contains(targetElement)){parentElement=targetElement;do{if(parentElement.scrollHeight>parentElement.offsetHeight){scrollParent=parentElement,targetElement.fastClickScrollParent=parentElement;break}parentElement=parentElement.parentElement}while(parentElement)}
// Always update the scroll top tracker if possible.
scrollParent&&(scrollParent.fastClickLastScrollTop=scrollParent.scrollTop)},/**
	 * @param {EventTarget} targetElement
	 * @returns {Element|EventTarget}
	 */
FastClick.prototype.getTargetElementFromEventTarget=function(eventTarget){
// On some older browsers (notably Safari on iOS 4.1 - see issue #56) the event target may be a text node.
// On some older browsers (notably Safari on iOS 4.1 - see issue #56) the event target may be a text node.
return eventTarget.nodeType===Node.TEXT_NODE?eventTarget.parentNode:eventTarget},/**
	 * On touch start, record the position and scroll offset.
	 *
	 * @param {Event} event
	 * @returns {boolean}
	 */
FastClick.prototype.onTouchStart=function(event){var targetElement,touch,selection;
// Ignore multiple touches, otherwise pinch-to-zoom is prevented if both fingers are on the FastClick element (issue #111).
if(event.targetTouches.length>1)return!0;if(targetElement=this.getTargetElementFromEventTarget(event.target),touch=event.targetTouches[0],deviceIsIOS){if(
// Only trusted events will deselect text on iOS (issue #49)
selection=window.getSelection(),selection.rangeCount&&!selection.isCollapsed)return!0;if(!deviceIsIOS4){
// Weird things happen on iOS when an alert or confirm dialog is opened from a click event callback (issue #23):
// when the user next taps anywhere else on the page, new touchstart and touchend events are dispatched
// with the same identifier as the touch event that previously triggered the click that triggered the alert.
// Sadly, there is an issue on iOS 4 that causes some normal touch events to have the same identifier as an
// immediately preceeding touch event (issue #52), so this fix is unavailable on that platform.
// Issue 120: touch.identifier is 0 when Chrome dev tools 'Emulate touch events' is set with an iOS device UA string,
// which causes all touch events to be ignored. As this block only applies to iOS, and iOS identifiers are always long,
// random integers, it's safe to to continue if the identifier is 0 here.
if(touch.identifier&&touch.identifier===this.lastTouchIdentifier)return event.preventDefault(),!1;this.lastTouchIdentifier=touch.identifier,
// If the target element is a child of a scrollable layer (using -webkit-overflow-scrolling: touch) and:
// 1) the user does a fling scroll on the scrollable layer
// 2) the user stops the fling scroll with another tap
// then the event.target of the last 'touchend' event will be the element that was under the user's finger
// when the fling scroll was started, causing FastClick to send a click event to that layer - unless a check
// is made to ensure that a parent layer was not scrolled before sending a synthetic click (issue #42).
this.updateScrollParent(targetElement)}}
// Prevent phantom clicks on fast double-tap (issue #36)
return this.trackingClick=!0,this.trackingClickStart=event.timeStamp,this.targetElement=targetElement,this.touchStartX=touch.pageX,this.touchStartY=touch.pageY,event.timeStamp-this.lastClickTime<this.tapDelay&&event.preventDefault(),!0},/**
	 * Based on a touchmove event object, check whether the touch has moved past a boundary since it started.
	 *
	 * @param {Event} event
	 * @returns {boolean}
	 */
FastClick.prototype.touchHasMoved=function(event){var touch=event.changedTouches[0],boundary=this.touchBoundary;return Math.abs(touch.pageX-this.touchStartX)>boundary||Math.abs(touch.pageY-this.touchStartY)>boundary},/**
	 * Update the last position.
	 *
	 * @param {Event} event
	 * @returns {boolean}
	 */
FastClick.prototype.onTouchMove=function(event){
// If the touch has moved, cancel the click tracking
return!this.trackingClick||((this.targetElement!==this.getTargetElementFromEventTarget(event.target)||this.touchHasMoved(event))&&(this.trackingClick=!1,this.targetElement=null),!0)},/**
	 * Attempt to find the labelled control for the given label element.
	 *
	 * @param {EventTarget|HTMLLabelElement} labelElement
	 * @returns {Element|null}
	 */
FastClick.prototype.findControl=function(labelElement){
// Fast path for newer browsers supporting the HTML5 control attribute
// Fast path for newer browsers supporting the HTML5 control attribute
// All browsers under test that support touch events also support the HTML5 htmlFor attribute
return void 0!==labelElement.control?labelElement.control:labelElement.htmlFor?document.getElementById(labelElement.htmlFor):labelElement.querySelector("button, input:not([type=hidden]), keygen, meter, output, progress, select, textarea")},/**
	 * On touch end, determine whether to send a click event at once.
	 *
	 * @param {Event} event
	 * @returns {boolean}
	 */
FastClick.prototype.onTouchEnd=function(event){var forElement,trackingClickStart,targetTagName,scrollParent,touch,targetElement=this.targetElement;if(!this.trackingClick)return!0;
// Prevent phantom clicks on fast double-tap (issue #36)
if(event.timeStamp-this.lastClickTime<this.tapDelay)return this.cancelNextClick=!0,!0;if(event.timeStamp-this.trackingClickStart>this.tapTimeout)return!0;if(
// Reset to prevent wrong click cancel on input (issue #156).
this.cancelNextClick=!1,this.lastClickTime=event.timeStamp,trackingClickStart=this.trackingClickStart,this.trackingClick=!1,this.trackingClickStart=0,
// On some iOS devices, the targetElement supplied with the event is invalid if the layer
// is performing a transition or scroll, and has to be re-detected manually. Note that
// for this to function correctly, it must be called *after* the event target is checked!
// See issue #57; also filed as rdar://13048589 .
deviceIsIOSWithBadTarget&&(touch=event.changedTouches[0],
// In certain cases arguments of elementFromPoint can be negative, so prevent setting targetElement to null
targetElement=document.elementFromPoint(touch.pageX-window.pageXOffset,touch.pageY-window.pageYOffset)||targetElement,targetElement.fastClickScrollParent=this.targetElement.fastClickScrollParent),targetTagName=targetElement.tagName.toLowerCase(),"label"===targetTagName){if(forElement=this.findControl(targetElement)){if(this.focus(targetElement),deviceIsAndroid)return!1;targetElement=forElement}}else if(this.needsFocus(targetElement))
// Case 1: If the touch started a while ago (best guess is 100ms based on tests for issue #36) then focus will be triggered anyway. Return early and unset the target element reference so that the subsequent click will be allowed through.
// Case 2: Without this exception for input elements tapped when the document is contained in an iframe, then any inputted text won't be visible even though the value attribute is updated as the user types (issue #37).
// Case 1: If the touch started a while ago (best guess is 100ms based on tests for issue #36) then focus will be triggered anyway. Return early and unset the target element reference so that the subsequent click will be allowed through.
// Case 2: Without this exception for input elements tapped when the document is contained in an iframe, then any inputted text won't be visible even though the value attribute is updated as the user types (issue #37).
// Select elements need the event to go through on iOS 4, otherwise the selector menu won't open.
// Also this breaks opening selects when VoiceOver is active on iOS6, iOS7 (and possibly others)
return event.timeStamp-trackingClickStart>100||deviceIsIOS&&window.top!==window&&"input"===targetTagName?(this.targetElement=null,!1):(this.focus(targetElement),this.sendClick(targetElement,event),deviceIsIOS&&"select"===targetTagName||(this.targetElement=null,event.preventDefault()),!1);
// Don't send a synthetic click event if the target element is contained within a parent layer that was scrolled
// and this tap is being used to stop the scrolling (usually initiated by a fling - issue #42).
// Prevent the actual click from going though - unless the target node is marked as requiring
// real clicks or if it is in the whitelist in which case only non-programmatic clicks are permitted.
return!(!deviceIsIOS||deviceIsIOS4||(scrollParent=targetElement.fastClickScrollParent,!scrollParent||scrollParent.fastClickLastScrollTop===scrollParent.scrollTop))||(this.needsClick(targetElement)||(event.preventDefault(),this.sendClick(targetElement,event)),!1)},/**
	 * On touch cancel, stop tracking the click.
	 *
	 * @returns {void}
	 */
FastClick.prototype.onTouchCancel=function(){this.trackingClick=!1,this.targetElement=null},/**
	 * Determine mouse events which should be permitted.
	 *
	 * @param {Event} event
	 * @returns {boolean}
	 */
FastClick.prototype.onMouse=function(event){
// If a target element was never set (because a touch event was never fired) allow the event
// If a target element was never set (because a touch event was never fired) allow the event
// Programmatically generated events targeting a specific element should be permitted
// Derive and check the target element to see whether the mouse event needs to be permitted;
// unless explicitly enabled, prevent non-touch click events from triggering actions,
// to prevent ghost/doubleclicks.
// Prevent any user-added listeners declared on FastClick element from being fired.
// Part of the hack for browsers that don't support Event#stopImmediatePropagation (e.g. Android 2)
// Cancel the event
return!this.targetElement||(!!event.forwardedTouchEvent||(!event.cancelable||(!(!this.needsClick(this.targetElement)||this.cancelNextClick)||(event.stopImmediatePropagation?event.stopImmediatePropagation():event.propagationStopped=!0,event.stopPropagation(),event.preventDefault(),!1))))},/**
	 * On actual clicks, determine whether this is a touch-generated click, a click action occurring
	 * naturally after a delay after a touch (which needs to be cancelled to avoid duplication), or
	 * an actual click which should be permitted.
	 *
	 * @param {Event} event
	 * @returns {boolean}
	 */
FastClick.prototype.onClick=function(event){var permitted;
// It's possible for another FastClick-like library delivered with third-party code to fire a click event before FastClick does (issue #44). In that case, set the click-tracking flag back to false and return early. This will cause onTouchEnd to return early.
// It's possible for another FastClick-like library delivered with third-party code to fire a click event before FastClick does (issue #44). In that case, set the click-tracking flag back to false and return early. This will cause onTouchEnd to return early.
// Very odd behaviour on iOS (issue #18): if a submit element is present inside a form and the user hits enter in the iOS simulator or clicks the Go button on the pop-up OS keyboard the a kind of 'fake' click event will be triggered with the submit-type input element as the target.
// Only unset targetElement if the click is not permitted. This will ensure that the check for !targetElement in onMouse fails and the browser's click doesn't go through.
return this.trackingClick?(this.targetElement=null,this.trackingClick=!1,!0):"submit"===event.target.type&&0===event.detail||(permitted=this.onMouse(event),permitted||(this.targetElement=null),permitted)},/**
	 * Remove all FastClick's event listeners.
	 *
	 * @returns {void}
	 */
FastClick.prototype.destroy=function(){var layer=this.layer;deviceIsAndroid&&(layer.removeEventListener("mouseover",this.onMouse,!0),layer.removeEventListener("mousedown",this.onMouse,!0),layer.removeEventListener("mouseup",this.onMouse,!0)),layer.removeEventListener("click",this.onClick,!0),layer.removeEventListener("touchstart",this.onTouchStart,!1),layer.removeEventListener("touchmove",this.onTouchMove,!1),layer.removeEventListener("touchend",this.onTouchEnd,!1),layer.removeEventListener("touchcancel",this.onTouchCancel,!1)},/**
	 * Check whether FastClick is needed.
	 *
	 * @param {Element} layer The layer to listen on
	 */
FastClick.notNeeded=function(layer){var metaViewport,chromeVersion,blackberryVersion,firefoxVersion;
// Devices that don't support touch don't need FastClick
if("undefined"==typeof window.ontouchstart)return!0;if(
// Chrome version - zero for other browsers
chromeVersion=+(/Chrome\/([0-9]+)/.exec(navigator.userAgent)||[,0])[1]){if(!deviceIsAndroid)return!0;if(metaViewport=document.querySelector("meta[name=viewport]")){
// Chrome on Android with user-scalable="no" doesn't need FastClick (issue #89)
if(metaViewport.content.indexOf("user-scalable=no")!==-1)return!0;
// Chrome 32 and above with width=device-width or less don't need FastClick
if(chromeVersion>31&&document.documentElement.scrollWidth<=window.outerWidth)return!0}}if(deviceIsBlackBerry10&&(blackberryVersion=navigator.userAgent.match(/Version\/([0-9]*)\.([0-9]*)/),blackberryVersion[1]>=10&&blackberryVersion[2]>=3&&(metaViewport=document.querySelector("meta[name=viewport]")))){
// user-scalable=no eliminates click delay.
if(metaViewport.content.indexOf("user-scalable=no")!==-1)return!0;
// width=device-width (or less than device-width) eliminates click delay.
if(document.documentElement.scrollWidth<=window.outerWidth)return!0}
// IE10 with -ms-touch-action: none or manipulation, which disables double-tap-to-zoom (issue #97)
// IE10 with -ms-touch-action: none or manipulation, which disables double-tap-to-zoom (issue #97)
// Firefox version - zero for other browsers
// Firefox 27+ does not have tap delay if the content is not zoomable - https://bugzilla.mozilla.org/show_bug.cgi?id=922896
return"none"===layer.style.msTouchAction||"manipulation"===layer.style.touchAction||(firefoxVersion=+(/Firefox\/([0-9]+)/.exec(navigator.userAgent)||[,0])[1],!!(firefoxVersion>=27&&(metaViewport=document.querySelector("meta[name=viewport]"),metaViewport&&(metaViewport.content.indexOf("user-scalable=no")!==-1||document.documentElement.scrollWidth<=window.outerWidth)))||("none"===layer.style.touchAction||"manipulation"===layer.style.touchAction))},/**
	 * Factory method for creating a FastClick object
	 *
	 * @param {Element} layer The layer to listen on
	 * @param {Object} [options={}] The options to override the defaults
	 */
FastClick.attach=function(layer,options){return new FastClick(layer,options)},"function"==typeof define&&"object"==typeof define.amd&&define.amd?
// AMD. Register as an anonymous module.
define(function(){return FastClick}):"undefined"!=typeof module&&module.exports?(module.exports=FastClick.attach,module.exports.FastClick=FastClick):window.FastClick=FastClick}();